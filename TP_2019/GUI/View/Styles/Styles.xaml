<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:collective="clr-namespace:GUI.Collective">
        <SolidColorBrush x:Key="TextBox.Static.Border" Color="#FF6E2B49"/>
        <SolidColorBrush x:Key="TextBox.MouseOver.Border" Color="#FFCB1E6B"/>
        <SolidColorBrush x:Key="TextBox.Focus.Border" Color="#FFCB1E6B"/>
        <SolidColorBrush x:Key="TextBox.Background" Color="#7FFFFFFF"/>
        <Style TargetType="{x:Type TextBox}">
            <Setter Property="Background" Value="{StaticResource TextBox.Background}"/>
            <Setter Property="BorderBrush" Value="{StaticResource TextBox.Static.Border}"/>
            <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"/>
            <Setter Property="BorderThickness" Value="1"/>
            <Setter Property="KeyboardNavigation.TabNavigation" Value="None"/>
            <Setter Property="HorizontalContentAlignment" Value="Left"/>
            <Setter Property="FocusVisualStyle" Value="{x:Null}"/>
            <Setter Property="AllowDrop" Value="true"/>
            <Setter Property="ScrollViewer.PanningMode" Value="VerticalFirst"/>
            <Setter Property="Stylus.IsFlicksEnabled" Value="False"/>
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type TextBox}">
                    <Border x:Name="border" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" SnapsToDevicePixels="True">
                        <ScrollViewer x:Name="PART_ContentHost" Focusable="false" HorizontalScrollBarVisibility="Hidden" VerticalScrollBarVisibility="Hidden"/>
                    </Border>

                    <ControlTemplate.Triggers>
                        <Trigger Property="IsEnabled" Value="false">
                             <Setter Property="Opacity" TargetName="border" Value="0.56"/>
                            <Setter Property="Background" TargetName="border" Value="#14F30670"/>
                            <Setter Property="BorderBrush" TargetName="border" Value="#FF6E2B49"/>
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="true">
                            <Setter Property="BorderBrush" TargetName="border" Value="{StaticResource TextBox.MouseOver.Border}"/>
                        </Trigger>
                        <Trigger Property="IsKeyboardFocused" Value="true">
                            <Setter Property="BorderBrush" TargetName="border" Value="{StaticResource TextBox.Focus.Border}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>

                </ControlTemplate>
                </Setter.Value>
            </Setter>
            <Style.Triggers>
                <MultiTrigger>
                    <MultiTrigger.Conditions>
                        <Condition Property="IsInactiveSelectionHighlightEnabled" Value="true"/>
                        <Condition Property="IsSelectionActive" Value="false"/>
                    </MultiTrigger.Conditions>
                    <Setter Property="SelectionBrush" Value="{DynamicResource {x:Static SystemColors.InactiveSelectionHighlightBrushKey}}"/>
                </MultiTrigger>
                <DataTrigger Binding="{Binding Action}">
                    <DataTrigger.Value>
                        <collective:Action>SHOW</collective:Action>
                    </DataTrigger.Value>
                    <Setter Property="IsEnabled" Value="False"/>
                </DataTrigger>
        </Style.Triggers>
        </Style>
    <Style x:Key="Cancel" TargetType="Button">
        <Setter Property="IsEnabled" Value="True"/>
        <Style.Triggers>
            <DataTrigger Binding="{Binding Action}">
                <DataTrigger.Value>
                    <collective:Action>ADD</collective:Action>
                </DataTrigger.Value>
                <Setter Property="Content" Value="Wyjdź"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding Action}">
                <DataTrigger.Value>
                    <collective:Action>SHOW</collective:Action>
                </DataTrigger.Value>
                <Setter Property="Content" Value="Zamknij"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding Action}">
                <DataTrigger.Value>
                    <collective:Action>EDIT</collective:Action>
                </DataTrigger.Value>
                <Setter Property="Content" Value="Wyjdź"/>
            </DataTrigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="Save" TargetType="{x:Type Button}">
        <Setter Property="IsEnabled" Value="False"/>
        <Style.Triggers>
            <DataTrigger Binding="{Binding Action}">
                <DataTrigger.Value>
                    <collective:Action>ADD</collective:Action>
                </DataTrigger.Value>
                <Setter Property="Content" Value="Dodaj"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding Action}">
                <DataTrigger.Value>
                    <collective:Action>SHOW</collective:Action>
                </DataTrigger.Value>
                <Setter Property="Visibility" Value="Hidden"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding Action}">
                <DataTrigger.Value>
                    <collective:Action>EDIT</collective:Action>
                </DataTrigger.Value>
                <Setter Property="Content" Value="Zapisz"/>
            </DataTrigger>
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding ElementName=FirstName, Path=(Validation.HasError)}" Value="false"/>
                    <Condition Binding="{Binding ElementName=LastName, Path=(Validation.HasError)}" Value="false"/>
                    <Condition Binding="{Binding ElementName=Telephone, Path=(Validation.HasError)}" Value="false"/>
                    <Condition Binding="{Binding ElementName=Age, Path=(Validation.HasError)}" Value="false"/>
                </MultiDataTrigger.Conditions>
                <Setter Property="IsEnabled" Value="True"/>
            </MultiDataTrigger>
        </Style.Triggers>
    </Style>

</ResourceDictionary>